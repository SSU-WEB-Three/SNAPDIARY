<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>Snapnote</title>
  <link rel="stylesheet" href="./css/index.css">
</head>
<body>
  <!-- 메인 영역 -->
  <div class="main-container">
    <!-- 왼쪽 큰 카드와 검색 영역 -->
    <div class="left-block">
      <div class="large-card" id="interactive-card">
        <div class="card-header"></div>
        <div class="log-container" id="log-container"></div>
      </div>
      <div class="search-bar">
        <input type="text" placeholder="오늘의 기록을 남겨보세요" id="search-input">
        <button class="search-btn" id="search-btn">🔍</button>
      </div>
    </div>

    <!-- 오른쪽 카드 -->
    <div class="small-card-container">
      <div class="small-card" id="quote-card">
        <div class="card-header"></div>
        <p>오늘의 명언</p>
        <p id="quote-text">오늘의 명언을 불러오는 중...</p>
        <p id="quote-author" class="quote-author"></p>
      </div>
      <div class="small-card">
        <div class="card-header"></div>
        <p>최근 커뮤니티</p>
        <ul id="recent-community-list"></ul>
      </div>
    </div>
  </div>

<script>
const greetings = [
  "안녕하세요. 오늘 하루 어떠신가요? 오늘도 활기차게 시작해보세요!",
  "오늘도 활기차게 시작해볼까요? 어떤 일이든 차분하게 해나가면 잘 될 거예요!",
  "무슨 일이든 잘 풀리길 바랄게요! 오늘은 어제보다 더 나은 하루가 될 거예요!",
  "하루의 시작을 기분 좋게 만들어 봅시다! 작은 변화도 나를 성장시킵니다.",
  "기분 좋은 하루가 되길 바랍니다! 오늘 하루도 당신의 이야기를 들려주세요.",
  "어떤 일이든 차분하게 해나가면 잘 될 거예요! 작은 성취도 소중하게 여겨보세요.",
  "오늘 하루도 화이팅! 지치더라도 잠깐 쉬어가도 괜찮아요.",
  "좋은 일이 가득한 하루 보내세요! 가끔은 계획하지 않은 일이 더 특별하답니다.",
  "오늘은 무엇을 해볼까요? 새로운 도전을 향해 한 걸음 더 나아가봐요.",
  "기분 좋은 생각으로 시작해봐요! 긍정적인 마음이 하루를 바꿀 수 있습니다.",
  "매일 똑같은 하루라도 오늘은 특별할 거예요! 어제와 다른 무언가를 찾아봐요.",
  "오늘 하루 중 가장 기억에 남는 순간은 무엇인가요? 소소한 일도 기억해볼까요?",
  "조금 힘들었던 순간도 있었나요? 그래도 끝까지 해낸 당신이 대단합니다.",
  "어제와 다른 오늘의 특별함을 찾아보세요! 사소한 변화도 소중히 여겨보세요.",
  "오늘도 기록을 통해 나를 돌아보세요. 작은 순간들이 모여 특별한 하루가 됩니다.",
  "크고 대단한 일이 아니어도 좋아요. 오늘 당신이 해낸 작은 성취를 기억해봐요.",
  "매일 새로운 하루가 찾아옵니다. 오늘도 나만의 속도로 나아가면 충분해요.",
  "오늘의 감정을 솔직하게 남겨보세요. 그 감정도 오늘의 소중한 일부랍니다.",
  "기억하기 귀찮다면 지금 간단하게 한 줄로 남겨보세요. 짧아도 당신만의 이야기예요.",
  "어제와 달랐던 순간을 한 줄로 남겨볼까요? 평범해 보이지만 특별한 기록이 될 거예요."
];

const currentUserId = "<%= user ? user.user_id : '' %>";
const MIN_INPUT_LENGTH = 10;

const prohibitedWords = [
  "씨발", "ㅅㅂ", "개새끼", "좆", "존나", "닥쳐", "꺼져", "죽어", "뒤져",
  "fuck", "shit", "bitch", "wtf", "stfu", "idiot", "asshole", "찌질", "찐따", "정신병",
  "asdasd", "qweqwe", "zxcv", "ㅋㅋㅋㅋㅋㅋ", "ㅎㅎㅎㅎㅎㅎ", ".....", "ㅁㄴㅇㄹ", "ㄱㅅㄱㅅ"
];

function getRandomGreeting() {
  const index = Math.floor(Math.random() * greetings.length);
  return greetings[index];
}

async function isInputValid(text) {
  const cleanedText = text.trim().toLowerCase();
  for (const word of prohibitedWords) {
    if (cleanedText.includes(word)) {
      console.warn("1차 필터링 차단 단어:", word);
      return false;
    }
  }

  try {
    const response = await fetch('/api/check-abuse', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ text })
    });

    const data = await response.json();
    return data.result === "적절함";
  } catch (err) {
    console.error("OpenAI 필터링 실패:", err);
    return true;
  }
}

let isHandling = false;

async function handleUserInput() {
  if (isHandling) return;
  isHandling = true;

  const userInput = document.getElementById("search-input").value;

  if (!currentUserId) {
    alert("로그인 후 이용해주세요.");
    window.location.href = "/login";
    isHandling = false;
    return;
  }

  if (userInput.length < MIN_INPUT_LENGTH) {
    alert(`입력한 문장이 너무 짧습니다. 최소 ${MIN_INPUT_LENGTH}자 이상 입력해주세요.`);
    document.getElementById("search-input").value = "";
    isHandling = false;
    return;
  }

  const valid = await isInputValid(userInput);
  if (!valid) {
    alert("부적절하거나 무의미한 표현이 포함되어 있습니다. 다시 입력해주세요.");
    document.getElementById("search-input").value = "";
    isHandling = false;
    return;
  }

  addLog(userInput, "right");

  try {
    const response = await fetch("/api/keyword-extract", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text: userInput, user_id: currentUserId })
    });

    const data = await response.json();

    if (data.keyword) {
      alert(`오늘의 키워드: ${data.keyword}`);

      await fetch("/api/chatlog", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          user_id: currentUserId,
          message: userInput,
          sender: "user"
        })
      });

      addLog(getRandomGreeting(), "left");
    } else {
      alert("키워드를 추출하지 못했어요. 다시 시도해 주세요.");
    }
  } catch (err) {
    console.error("키워드 추출 오류:", err);
    addLog("키워드 분석 중 오류가 발생했어요.", "left");
  }

  document.getElementById("search-input").value = "";
  isHandling = false;
}

function addLog(text, position) {
  const logContainer = document.getElementById("log-container");
  const logItem = document.createElement("div");
  logItem.className = `log-item ${position}`;

  const messageText = document.createElement("p");
  messageText.innerText = text;

  const timestamp = document.createElement("span");
  timestamp.className = `timestamp ${position}`;
  timestamp.innerText = getCurrentTime();

  logItem.appendChild(messageText);
  logItem.appendChild(timestamp);
  logContainer.appendChild(logItem);
  logContainer.scrollTop = logContainer.scrollHeight;
}

function getCurrentTime() {
  const now = new Date();
  return `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
}

async function fetchQuote() {
  try {
    const response = await fetch("https://korean-advice-open-api.vercel.app/api/advice");
    const data = await response.json();
    document.getElementById("quote-text").innerText = `"${data.message}"`;
    document.getElementById("quote-author").innerText = `- ${data.author} (${data.authorProfile})`;
  } catch (error) {
    document.getElementById("quote-text").innerText = "명언을 불러오는 중 오류 발생.";
    document.getElementById("quote-author").innerText = "";
  }
}

async function loadRecentCommunities() {
  try {
    const response = await fetch('/api/community/recent');
    const data = await response.json();

    const listContainer = document.getElementById('recent-community-list');
    listContainer.innerHTML = '';

    data.forEach(map => {
      const name = map.user_id?.username || '익명';
      const date = new Date(map.created_at).toLocaleDateString("ko-KR", {
        year: 'numeric', month: '2-digit', day: '2-digit'
      });

      const li = document.createElement('li');
      li.innerHTML = `
        <a href="/blockview/${map.map_id}" style="text-decoration: none; color: inherit;">
          <strong>${name}</strong> 님의 블록 맵 <small>${date}</small>
        </a>
      `;
      listContainer.appendChild(li);
    });
  } catch (err) {
    console.error("최근 커뮤니티 불러오기 실패:", err);
    document.getElementById('recent-community-list').innerHTML = "<li>불러오기 실패</li>";
  }
}

document.addEventListener("DOMContentLoaded", () => {
  addLog(getRandomGreeting(), "left");
  fetchQuote();
  loadRecentCommunities();

  document.getElementById("search-btn").addEventListener("click", handleUserInput);
  document.getElementById("search-input").addEventListener("keydown", (event) => {
    if (event.key === "Enter") {
      handleUserInput();
      event.preventDefault();
    }
  });
});
</script>
</body>
</html>
