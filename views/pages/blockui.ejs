<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>칠교놀이 UI</title>
  <link rel="stylesheet" href="/css/blockstyle.css">
</head>
<body>
  <div class="container">
    
    <div class="floating-buttons">
      <button id="saveBtn">저장하기</button>
      <button onclick="addShape('triangle large')">큰 삼각형</button>
      <button onclick="addShape('triangle small')">작은 삼각형</button>
      <button onclick="addShape('square')">정사각형</button>
      <button onclick="addShape('parallelogram')">평행사변형</button>
    </div>
    <div class="main">
      <div class="header">블록 배치하기</div>
      <div class="canvas">
        
      </div>
    </div>
  </div>

  <script>
    const userId = "<%= userId %>";
    const pageId = "<%= pageId %>";

    function addShape(type) {
      const canvas = document.querySelector('.canvas');
      const newBlock = document.createElement('div');

      newBlock.className = `block ${type}`;
      newBlock.style.left = '100px';
      newBlock.style.top = '100px';
      newBlock.style.transform = '';
      newBlock.dataset.shape = type;

      makeDraggableAndRotatalbe(newBlock);
      canvas.appendChild(newBlock);
    }

    document.querySelectorAll('.block').forEach(makeDraggableAndRotatalbe);

    function makeDraggableAndRotatalbe(block) {
      let angle = 0;
      let dragged = false;

      // 회전 기능
      block.addEventListener('click', (e) => {
        if (dragged) return;
        angle = (angle + 45) % 360;
        block.style.transform = `rotate(${angle}deg)`;
        if (block.classList.contains('parallelogram')) {
          block.style.transform += ' skew(-30deg)';
        }
      });

      // 드래그 기능
      block.addEventListener('mousedown', (e) => {
        e.preventDefault();
        const shiftX = e.clientX - block.offsetLeft;
        const shiftY = e.clientY - block.offsetTop;
        dragged = false;

        function onMouseMove(e) {
          block.style.left = e.clientX - shiftX + 'px';
          block.style.top = e.clientY - shiftY + 'px';
          dragged = true;
        }

        function onMouseUp() {
          document.removeEventListener('mousemove', onMouseMove);
          document.removeEventListener('mouseup', onMouseUp);
        }

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
      });

      block.ondragstart = () => false;
    }

      //{   DB에 저장하게 될 요소들
        //"page_id": "664b4ff945e10a0012ab3456", 어떤 날짜의 기록페이지인지 기억해야함.
        //"shape_type": "triangle large",   도형의 정보 (큰/작은 삼각형, 정사각형, 평행사변형)
        //"position": { "x": 120, "y": 200 },  도형의 배치 위치 
        //"rotation": 45,   회전 정보
        //"created_at": "2025-05-20T14:05:00.123Z" 해당 도형이 배치된 시각
        //"user_id" : 유저의 아이디
      //}

    // DB에 저장할 요소들 추출하는 과정
    function extractBlockData() {
      const blocks = document.querySelectorAll('.block');
      const blockDataList = [];

      // 블록 개별 작업 선언 : 배치하는 블록 하나하나 개별적으로 작업하겠다는 뜻임..
      blocks.forEach((block) => {
        const style = window.getComputedStyle(block);
        const transform = style.transform;

        let rotation = 0;
        if (transform && transform !== 'none') {
          transform.match(/rotate\(([-\d.]+)deg\)/);
          if (match) rotation = parseFloat(match[1]);
        }

        const x = parseInt (block.style.left || 0);
        const y = parseInt(block.style.top || 0);

        const shapeType = block.dataset.shape || "unknown";

        const blockData = {
          page_id : pageId,
          shape_type : shapeType,
          position : {
            x : x,
            y : y
          },
          rotation : rotation,
          created_at : new Date().toISOString(),
          user_id : userId
        };

        blockDataList.push(blockData);

      });

      return blockDataList;
    }

    document.getElementById('saveBtn').addEventListener('click',() => {

      const blockData = extractBlockData(userId, pageId);

      fetch('/save-blocks', {
        method: 'POST',
        headers: {'Content-Type' : 'application/json'},
        body: JSON.stringify(blockData)
      })
      .then(res => res.text())
      .then(msg => alert(msg))
      .catch(err => {
        console.error('저장 오류: ', err);
        alert('저장 실패');
      });
    });
  </script>
</body>
</html>

