<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>칠교놀이 UI</title>
  <link rel="stylesheet" href="/css/blockstyle.css">
</head>
<body>
  <div class="container">
    <div class="floating-buttons">
      <button id="saveBtn">저장하기</button>
      <button onclick="addShape('triangle large')">큰 삼각형</button>
      <button onclick="addShape('triangle small')">작은 삼각형</button>
      <button onclick="addShape('square')">정사각형</button>
      <button onclick="addShape('parallelogram')">평행사변형</button>
    </div>
    <div class="main">
      <div class="header1">블록 배치하기</div>
      <div class="canvas"></div>
    </div>
  </div>

<script>
  const userId = "<%= userId %>";
  const mapId = "<%= mapId %>";

  let currentKeywordCount = 0;
  let currentBlockCount = 0;

  async function fetchKeywordCount() {
    try {
      const res = await fetch(`/api/keywords/count/${userId}`);
      const data = await res.json();
      currentKeywordCount = data.count;
    } catch (err) {
      console.error("키워드 수 조회 실패:", err);
    }
  }

  window.addEventListener("DOMContentLoaded", async () => {
    await fetchKeywordCount();

    if (mapId) {
      try {
        const res = await fetch(`/api/blockmap/${mapId}`);
        const mapData = await res.json();
        if (!mapData || !mapData.block_id) return;

        const canvas = document.querySelector('.canvas');
        mapData.block_id.forEach(block => {
          const newBlock = document.createElement('div');
          newBlock.className = `block ${block.shape_type}`;
          newBlock.style.left = `${block.x_pos}px`;
          newBlock.style.top = `${block.y_pos}px`;
          newBlock.style.backgroundColor = block.color || '#FFA500';
          newBlock.dataset.shape = block.shape_type;
          newBlock.style.transform = `rotate(${block.rotation_degree}deg)` +
            (block.shape_type === 'parallelogram' ? ' skew(-30deg)' : '');

          makeDraggableAndRotatable(newBlock);
          canvas.appendChild(newBlock);
          currentBlockCount++;
        });
      } catch (err) {
        console.error("블록 맵 로딩 실패:", err);
      }
    }
  });

  function addShape(type) {
    if (currentBlockCount >= currentKeywordCount) {
      alert("오늘 입력한 키워드 수만큼만 블록을 생성할 수 있습니다.");
      return;
    }

    const canvas = document.querySelector('.canvas');
    const newBlock = document.createElement('div');
    newBlock.className = `block ${type}`;
    newBlock.style.left = '100px';
    newBlock.style.top = '100px';
    newBlock.style.transform = '';
    newBlock.dataset.shape = type;

    makeDraggableAndRotatable(newBlock);
    canvas.appendChild(newBlock);

    currentBlockCount++;
  }

  function makeDraggableAndRotatable(block) {
    let angle = 0;
    let dragged = false;

    block.addEventListener('click', (e) => {
      e.stopPropagation();

      if (dragged) return;

      angle = (angle + 45) % 360;
      block.style.transform = `rotate(${angle}deg)`;
      if (block.classList.contains('parallelogram')) {
        block.style.transform += ' skew(-30deg)';
      }

      createDeleteButton();
    });


    block.addEventListener('mousedown', (e) => {
      e.preventDefault();
      const shiftX = e.clientX - block.offsetLeft;
      const shiftY = e.clientY - block.offsetTop;
      dragged = false;

      function onMouseMove(e) {
        block.style.left = `${e.clientX - shiftX}px`;
        block.style.top = `${e.clientY - shiftY}px`;
        dragged = true;
      }

      function onMouseUp() {
        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
      }

      document.addEventListener('mousemove', onMouseMove);
      document.addEventListener('mouseup', onMouseUp);
    });

    block.ondragstart = () => false;
  }

  function extractBlockData() {
  const blocks = document.querySelectorAll('.block');
  return Array.from(blocks).map(block => {
    const style = window.getComputedStyle(block);
    const transform = style.transform;
    let rotation = 0;

    if (transform && transform !== 'none') {
      const values = transform.match(/matrix\(([^)]+)\)/);
      if (values) {
        const parts = values[1].split(', ');
        const a = parseFloat(parts[0]);
        const b = parseFloat(parts[1]);
        rotation = Math.round(Math.atan2(b, a) * (180 / Math.PI));
      }
    }

    return {
      shape_type: block.dataset.shape,
      color: style.backgroundColor || '#FFA500',
      x_pos: parseInt(block.style.left || 0),
      y_pos: parseInt(block.style.top || 0),
      rotation_degree: rotation,
      created_at: new Date().toISOString(),
      keyword_id: null
    };
  });
}


  document.getElementById('saveBtn').addEventListener('click', async () => {
    const blockDataList = extractBlockData();

    try {
      const res = await fetch('/save-blocks', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          blockDataList,
          map_id: mapId,
          user_id: userId
        })
      });

      if (!res.ok) throw new Error('서버 오류');
      const msg = await res.text();
      alert(msg);
    } catch (err) {
      console.error("저장 실패:", err);
      alert("저장에 실패했습니다.");
    }
  });

  function createDeleteButton(targetBlock) {
    remove_exist_delete_btn();

    const deleteBtn = document.createElement('button');
    deleteBtn.innerText = 'x';
    deleteBtn.className = 'delete-btn';

    deleteBtn.style.left = '${targetBlock.offsetLeft + targetBlock.offsetTop - 10}px';
    deleteBtn.style.top = '${targetBlock.offsetTop - 10}px';

    deleteBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      targetBlock.remove();
      deleteBtn.remove();
      currentBlockCount--;
    });

    function remove_exist_delete_btn() {
    const exist_btn = document.querySelector('.delete-btn');
    if (exist_btn){
      exist_btn.remove();
    }
  }



    document.querySelector('.canvas').appendChild(deleteBtn);
  }


  document.addEventListener('click', () => {
      remove_exist_delete_btn();
    });
</script>

</body>
</html>
