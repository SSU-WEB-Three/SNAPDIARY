<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>칠교놀이 UI</title>
  <link rel="stylesheet" href="/css/blockstyle.css">
</head>
<body>
  <div class="container">
    <div class="floating-buttons">
      <button id="saveBtn">저장하기</button>
      <button onclick="addShape('triangle large')">큰 삼각형</button>
      <button onclick="addShape('triangle small')">작은 삼각형</button>
      <button onclick="addShape('square')">정사각형</button>
      <button onclick="addShape('circle')">원</button>
      <button onclick="addShape('star')">별</button>  
    </div>
    <div class="main">
      <div class="header1">블록 배치하기</div>
      <div class="canvas"></div>
    </div>
  </div>

  
<script>
  const userId = "<%= userId %>";
  const mapId = "<%= mapId %>";

  let currentKeywordCount = 0;
  let currentBlockCount = 0;

  async function fetchKeywordCount() {
    try {
      const res = await fetch(`/api/keywords/count/${userId}`);
      const data = await res.json();
      currentKeywordCount = data.count;
    } catch (err) {
      console.error("키워드 수 조회 실패:", err);
    }
  }

  window.addEventListener("DOMContentLoaded", async () => {
    await fetchKeywordCount();

    if (mapId) {
      try {
        const res = await fetch(`/api/blockmap/${mapId}`);
        const mapData = await res.json();
        if (!mapData || !mapData.block_id) return;

        const canvas = document.querySelector('.canvas');
        mapData.block_id.forEach(block => {
          const newBlock = document.createElement('div');
          newBlock.className = `block ${block.shape_type}`;
          newBlock.style.left = `${block.x_pos}px`;
          newBlock.style.top = `${block.y_pos}px`;
          newBlock.style.backgroundColor = block.color || '#FFA500';
          newBlock.dataset.shape = block.shape_type;
          
          const scale = block.scale || 1;
          const rotation = block.rotation_degree || 0;
          newBlock.style.transform = `scale(${scale}) rotate(${rotation}deg)` + (block.shape_type === 'parallelogram' ? ' skew(-30deg)' : '');
          newBlock.dataset.scale = scale;
          newBlock.dataset.rotation = rotation;
          newBlock.dataset.tag = block.tag || '';

          if (block.tag) {
            const tagLabel = document.createElement('span');
            tagLabel.textContent = block.tag;
            newBlock.appendChild(tagLabel);
          }

          makeDraggableAndRotatable(newBlock);
          canvas.appendChild(newBlock);
          currentBlockCount++;
        });
      } catch (err) {
        console.error("블록 맵 로딩 실패:", err);
      }
    }
  });

  function addShape(type) {
    if (currentBlockCount >= currentKeywordCount) {
      alert("오늘 입력한 키워드 수만큼만 블록을 생성할 수 있습니다.");
      return;
    }

    const canvas = document.querySelector('.canvas');
    const newBlock = document.createElement('div');
    newBlock.className = `block ${type}`;
    newBlock.style.left = '100px';
    newBlock.style.top = '100px';
    newBlock.style.transform = '';
    newBlock.dataset.shape = type;

    makeDraggableAndRotatable(newBlock);
    canvas.appendChild(newBlock);

    currentBlockCount++;
  }

  function makeDraggableAndRotatable(block) {
  let angle = 0;
  let dragged = false;
  let scaleOptions = [1, 1.5, 2, 2.5, 3, 3.5, 4, 0.5];
  let scaleIndex = 0;
  let scale = scaleOptions[scaleIndex];

  // 회전 좌클릭
  block.addEventListener('click', (e) => {
    e.stopPropagation();
    createOptionPanel(block);
  });

  // 색상 변경 우클릭
  block.addEventListener('contextmenu', (e) => {
  e.preventDefault();
});

  // 🎯 드래그 이동
  block.addEventListener('mousedown', (e) => {
    e.preventDefault();
    
    const canvasRect = document.querySelector('.canvas').getBoundingClientRect();
    const blockRect = block.getBoundingClientRect();

    const shiftX = e.clientX - blockRect.left;
    const shiftY = e.clientY - blockRect.top;
    dragged = false;

    function onMouseMove(e) {
      block.style.left = `${e.clientX - canvasRect.left - shiftX}px`;
      block.style.top = `${e.clientY - canvasRect.top - shiftY}px`;
      dragged = true;
    }

    function onMouseUp() {
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    }

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  });

  block.ondragstart = () => false;

  // 🔄 변환 적용 함수
  function applyTransform() {
    block.style.transform = `scale(${scale}) rotate(${angle}deg)`;
    if (block.classList.contains('parallelogram')) {
      block.style.transform += ' skew(-30deg)';
    }
    block.dataset.scale = scale;
    block.dataset.rotation = angle;
  }
}


  function extractBlockData() {
  const blocks = document.querySelectorAll('.block');
  return Array.from(blocks).map(block => {
    const style = window.getComputedStyle(block);
    const transform = style.transform;
    let rotation = 0;
    let scale = 1;

    if (transform && transform !== 'none') {
      const values = transform.match(/matrix\(([^)]+)\)/);
      if (values) {
        const parts = values[1].split(', ');
        const a = parseFloat(parts[0]);
        const b = parseFloat(parts[1]);
        rotation = Math.round(Math.atan2(b, a) * (180 / Math.PI));
        scale = Math.sqrt(a * a + b * b); // scaleX 기준
      }
    }

    const label = block.querySelector('span');
    const tag = label ? label.textContent : '';

    return {
      shape_type: block.dataset.shape,
      color: style.backgroundColor || '#FFA500',
      x_pos: parseInt(block.style.left || 0),
      y_pos: parseInt(block.style.top || 0),
      scale: parseFloat(block.dataset.scale || 1),
      rotation_degree: parseInt(block.dataset.rotation || 0),
      tag: block.dataset.tag || '',                 // ✅ 직접 추출한 값 사용
      created_at: new Date().toISOString(),
      keyword_id: null
    };
  });
}

  document.getElementById('saveBtn').addEventListener('click', async () => {
    const blockDataList = extractBlockData();

    try {
      const res = await fetch('/save-blocks', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          blockDataList,
          map_id: mapId,
          user_id: userId
        })
      });

      if (!res.ok) throw new Error('서버 오류');
      const msg = await res.text();
      alert(msg);
    } catch (err) {
      console.error("저장 실패:", err);
      alert("저장에 실패했습니다.");
    }
  });
function createOptionPanel(block) {
  remove_exist_option_panel();

  const panel = document.createElement('div');
  panel.className = 'option-panel';
  panel.style.position = 'absolute';
  panel.style.left = `${block.offsetLeft + block.offsetWidth + 10}px`;
  panel.style.top = `${block.offsetTop}px`;
  panel.style.backgroundColor = '#fff';
  panel.style.border = '1px solid #aaa';
  panel.style.borderRadius = '8px';
  panel.style.padding = '8px';
  panel.style.display = 'flex';
  panel.style.flexDirection = 'column';
  panel.style.zIndex = 1000;

  // 버튼 생성 함수
  const createButton = (label, onClick) => {
    const btn = document.createElement('button');
    btn.textContent = label;
    btn.style.marginBottom = '6px';
    btn.style.fontSize = '12px';
    btn.style.cursor = 'pointer';
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      onClick();
    });
    return btn;
  };

  // 회전
  let angle = parseInt(block.dataset.rotation || 0);
  panel.appendChild(createButton('🔁 회전', () => {
    angle = (angle + 45) % 360;
    block.dataset.rotation = angle; // ✅ dataset 저장
    applyTransform();
  }));

  // 크기
  const scaleOptions = [1, 1.5, 2, 2.5, 3, 0.5];
  let scale = parseFloat(block.dataset.scale || 1);
  let scaleIndex = scaleOptions.indexOf(scale);
  if (scaleIndex === -1) scaleIndex = 0;
  panel.appendChild(createButton('↔️ 크기', () => {
    scaleIndex = (scaleIndex + 1) % scaleOptions.length;
    scale = scaleOptions[scaleIndex];
    block.dataset.scale = scale; // ✅ dataset 저장
    applyTransform();
  }));

  // 색상
  panel.appendChild(createButton('🎨 색상', () => {
    const picker = document.createElement('input');
    picker.type = 'color';
    picker.style.position = 'absolute';
    picker.style.zIndex = 2000;
    document.body.appendChild(picker);
    picker.click();
    picker.addEventListener('input', () => {
      block.style.backgroundColor = picker.value;
      // 색상은 style에서 바로 가져오기 때문에 따로 dataset에 안 넣어도 됨
      picker.remove();
    });
    picker.addEventListener('blur', () => picker.remove());
  }));

  // 태그
  panel.appendChild(createButton('🔠 태그', () => {
    const tag = prompt("태그를 입력하세요");
    if (tag) {
      let label = block.querySelector('span');
      if (!label) {
        label = document.createElement('span');
        block.appendChild(label);
      }
      label.textContent = tag;
      block.dataset.tag = tag; // ✅ dataset 저장
    }
  }));

  // 삭제
  panel.appendChild(createButton('❌ 삭제', () => {
    block.remove();
    panel.remove();
    currentBlockCount--;
  }));

  // 변환 적용 함수
  function applyTransform() {
    block.style.transform = `scale(${scale}) rotate(${angle}deg)`;
    if (block.classList.contains('parallelogram')) {
      block.style.transform += ' skew(-30deg)';
    }
  }

  document.querySelector('.canvas').appendChild(panel);

  // 옵션 패널 외부 클릭 시 제거
  window.addEventListener('click', (e) => {
    if (
      e.target.closest('.option-panel') ||
      e.target.classList.contains('block')
    ) return;

    remove_exist_option_panel();
  });
}


function remove_exist_option_panel() {
  const panel = document.querySelector('.option-panel');
  if (panel) panel.remove();
}




</script>

</body>
</html>
